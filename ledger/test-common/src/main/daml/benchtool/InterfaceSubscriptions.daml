-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module InterfaceSubscriptions where

interface FooView where
  _view : FooData

data FooData = FooData
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
    templateName: Text
  deriving (Eq, Show)

-- These templates are duplicated from Foo.daml.
-- We need to compile that module in Daml 1.14 so we cannot use interfaces
-- and because we do not (yet) have retroactive interface implementations
-- we cannot only define the implementations here.

template Foo1
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    implements FooView where
      _view = FooData with templateName = "Foo1", ..

    nonconsuming choice Foo1_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo1_ConsumingChoice: ()
      with
          exercisePayload: Text
      controller signatory
      do
          return ()

foo2ToFooData : Foo2 -> FooData
foo2ToFooData Foo2{..} = FooData with templateName = "Foo2", ..

fooDataToFoo2 : FooData -> Foo2
fooDataToFoo2 FooData{..}
  | templateName == "Foo2" = Foo2 {..}
  | otherwise = error "fooDataToFoo2 called non non-foo2"

foo2Roundtrip : Int -> Foo2 -> Foo2
foo2Roundtrip n x
  | n <= 0 = x
  | otherwise = foo2Roundtrip (n - 1) (fooDataToFoo2 $ foo2ToFooData x)

template Foo2
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    implements FooView where
      _view = foo2ToFooData $ foo2Roundtrip 10 this

    nonconsuming choice Foo2_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo2_ConsumingChoice: ()
      with
         exercisePayload: Text
      controller signatory
      do
         return ()

foo3ToFooData : Foo3 -> FooData
foo3ToFooData Foo3{..} = FooData with templateName = "Foo3", ..

fooDataToFoo3 : FooData -> Foo3
fooDataToFoo3 FooData{..}
  | templateName == "Foo3" = Foo3 {..}
  | otherwise = error "fooDataToFoo3 called non non-foo3"

foo3Roundtrip : Int -> Foo3 -> Foo3
foo3Roundtrip n x
  | n <= 0 = x
  | otherwise = foo3Roundtrip (n - 1) (fooDataToFoo3 $ foo3ToFooData x)

template Foo3
  with
    signatory : Party
    observers : [Party]
    payload : Text
    keyId: Text
  where
    signatory signatory
    observer observers
    key (signatory, keyId): (Party, Text)
    maintainer key._1

    implements FooView where
      _view = foo3ToFooData $ foo3Roundtrip 100 this

    nonconsuming choice Foo3_NonconsumingChoice: ()
      with
        exercisePayload: Text
      observer observers
      controller signatory
      do
        return ()

    choice Foo3_ConsumingChoice: ()
      with
          exercisePayload: Text
      controller signatory
      do
          return ()

