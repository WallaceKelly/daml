module InterfaceSubscriptions where

newtype Round = Round with number : Int
  deriving (Eq, Ord, Show)

newtype RatePerRound = RatePerRound with rate : Decimal
  deriving (Eq, Ord, Show)

data ExpiringQuantity = ExpiringQuantity with
    initialQuantity : Decimal
    createdAt : Round
    ratePerRound : RatePerRound
  deriving (Eq, Ord, Show)

template CoinDataV1
  with
    issuer : Party
    owner : Party
    quantity : ExpiringQuantity
  where
    signatory issuer, owner

{-
    implements CoinViewV1 where
      _view = this
-}

    implements CoinViewV2 where
      _view = CoinDataV2 with
        groupId = None
        ..

{- Uncommented for now since we otherwise get colliding _view methods. If we need to test this before
   damlc adds native view methods, we can move things to different modules.
interface CoinViewV1 where
  _view : CoinDataV1
-}

template CoinDataV2
  with
    issuer : Party
    owner : Party
    quantity : ExpiringQuantity
    groupId : Optional Text
  where
    signatory issuer, owner

{-
    implements CoinViewV1 where
      _view = this
-}

    implements CoinViewV2 where
      _view = this

interface CoinViewV2 where
  _view : CoinDataV2

template CoinRules
  with
    issuer : Party
  where
    signatory issuer
    choice Transfer : ContractId CoinDataV1
      with
        cid : ContractId CoinDataV1
        oldOwner : Party
        newOwner : Party
      controller oldOwner, newOwner
      do dat <- fetch cid
         archive cid
         create dat with owner = newOwner
