
-- | Manage the #transfers meta info

module RulesB where

import InterfaceA
import CoinB

template RulesImpl
  with
    admin : Party
    obs : [Party]
  where
    signatory [admin]
    observer obs

    -- The Mint entry point.
    nonconsuming choice RulesImpl_Mint : ContractId Coin
      with issuer : Party
      controller [issuer]
      do
        new <- create CoinT with issuer, owner = issuer, numberOfTransfers = 0
        pure $ toInterfaceContractId new

    -- How many times has this coin been transfered?
    nonconsuming choice RulesImpl_QueryTransferCount : Int
      with
        coin : ContractId Coin
        inspector : Party -- issuer or owner will do
      controller [inspector]
      do transferCount <$> fetch coin

    -- Core Transfer logic. The coin delegates back here via the rules-interface.
    implements Rules where

      transferR : ContractId Coin -> CoinView -> Coin_Transfer -> Update (ContractId Coin)
              = \coin view targ -> do
        old <- fetch coin
        new <- create CoinT with
          issuer = view.issuer
          owner = targ.newOwner
          numberOfTransfers = transferCount old + 1
        exercise coin Coin_Archive
        pure (toInterfaceContractId new)

transferCount : Coin -> Int
transferCount anyCoin = do
  case fromInterface @CoinT @Coin anyCoin of
    None -> 0
    Some coin -> coin.numberOfTransfers
