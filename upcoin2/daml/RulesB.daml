
-- | Manage the #transfers meta info

module RulesB where

import InterfaceA
import CoinB

template RulesT
  with
    admin : Party
    obs : [Party]
  where
    signatory [admin]
    observer obs

    -- The Mint entry point.
    nonconsuming choice RulesT_Mint : ContractId CoinI
      with issuer : Party
      controller [issuer]
      do
        new <- create CoinT with issuer, owner = issuer, numberOfTransfers = 0
        pure $ toInterfaceContractId new

    -- How many times has this coin been transfered?
    nonconsuming choice RulesT_QueryTransferCount : Int
      with
        coin : ContractId CoinI
        inspector : Party -- issuer or owner will do
      controller [inspector]
      do transferCount <$> fetch coin

    -- Core Transfer logic. The coin delegates back here via the rules-interface.
    implements RulesI where
      transferR : ContractId CoinI -> CoinView -> Party -> Update (ContractId CoinI)
              = \coin view newOwner -> do
        old <- fetch coin
        new <- create CoinT with
          issuer = view.issuer
          owner = newOwner
          numberOfTransfers = transferCount old + 1
        exercise coin CoinI_Archive
        pure (toInterfaceContractId new)

transferCount : CoinI -> Int
transferCount anyCoin = do
  case fromInterface @CoinT @CoinI anyCoin of
    None -> 0
    Some coin -> coin.numberOfTransfers
