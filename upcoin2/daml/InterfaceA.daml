-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | interface to the upcoin2 system
module InterfaceA where


class HasControllers v t where -- this should probably be a standard Daml thing
  controllers_ : v -> t -> [Party]


data CoinView = CoinView with
  issuer : Party
  owner : Party
    deriving (Eq,Show)

instance HasSignatory CoinView where
  signatory v = [v.issuer,v.owner]

instance HasControllers CoinView Transfer where
  controllers_ _ t = [t.newOwner]


interface Coin where
  _view : CoinView

  -- Collect the authority for a coin transfer, and delegate to the rules.
  nonconsuming choice Transfer : ContractId Coin
    with
      rules : ContractId Rules
      newOwner : Party
    controller [(_view this).owner, newOwner]
    do
      exercise rules TransferImpl with
        coin = self
        view = _view this
        targ = arg

  choice Coin_Archive : ()
    controller (signatory this)
    do pure ()


interface Rules where

  transferMethod : ContractId Coin -> CoinView -> Transfer -> Update (ContractId Coin)

  -- The collected authority is passed explicitly.
  nonconsuming choice TransferImpl : ContractId Coin
    with
      coin : ContractId Coin
      view : CoinView
      targ : Transfer
    controller (signatory view ++ controllers_ view targ)
    do transferMethod this coin view targ
