
-- | interface to the upcoin2 system

module InterfaceA where


class HasControllers v t where -- this should probably be a standard Daml thing
  controllers_ : v -> t -> [Party]


data CoinView = CoinView with
  issuer : Party
  owner : Party
    deriving (Eq,Show)

instance HasSignatory CoinView where
  signatory v = [v.issuer,v.owner]

instance HasControllers CoinView Coin_Transfer where
  controllers_ _ t = [t.newOwner]


interface Coin where
  _view : CoinView

  -- Collect the authority for a coin transfer, and delegate to the rules.
  nonconsuming choice Coin_Transfer : ContractId Coin
    with
      rules : ContractId RulesI
      newOwner : Party
    controller [(_view this).owner, newOwner]
    do
      exercise rules RulesI_Transfer_Impl2 with
        coin = self
        view = _view this
        targ = arg

  choice Coin_Archive : ()
    controller (signatory this)
    do pure ()


interface RulesI where

  transferR : ContractId Coin -> CoinView -> Coin_Transfer -> Update (ContractId Coin)

  -- The collected authority is passed explicitly.
  nonconsuming choice RulesI_Transfer_Impl2 : ContractId Coin
    with
      coin : ContractId Coin
      view : CoinView
      targ : Coin_Transfer
    controller (signatory view ++ controllers_ view targ)
    do transferR this coin view targ

