
module RulesA where

import InterfaceA
import CoinA

template RulesT
  with
    admin : Party
    obs : [Party]
  where
    signatory [admin]
    observer obs

    -- The Mint entry point.
    nonconsuming choice RulesT_Mint : ContractId Coin
      with issuer : Party
      controller [issuer]
      do
        new <- create CoinT with issuer, owner = issuer
        pure $ toInterfaceContractId new

    -- Core Transfer logic. The coin delegates back here via the rules-interface.
    implements RulesI where

      transferR : ContractId Coin -> CoinView -> Coin_Transfer -> Update (ContractId Coin)
              = \coin view targ -> do
        new <- create CoinT with issuer = view.issuer, owner = targ.newOwner
        exercise coin Coin_Archive
        pure (toInterfaceContractId new)
