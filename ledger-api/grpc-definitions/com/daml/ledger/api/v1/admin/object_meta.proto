// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

option java_outer_classname = "ObjectMetaOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";

// Represents metadata corresponding to some participant resource (e.g. a participant user).
//
// Based on 'ObjectMeta' meta used in Kubernetes API.
// See https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/generated.proto#L640
message ObjectMeta {

  // An opaque value populated by a participant server which represents the internal version of a resource
  // this ObjectMeta message is attached to. Participant server will change it to a unique value upon each time the corresponding resource is updated.
  // You must not rely on resource version value format. Implementations are free to choose any suitable versioning scheme and change it
  // without notice.
  //
  // You can obtain the newest resource version value by issuing a read request.
  // You may use it for concurrent change detection by passing it back unmodified in an update request.
  // Participant will compare the passed value with the value maintained by the system to determine
  // if any other updates took place since you read the resource version.
  // Upon a successful update you are guaranteed that no other update took place during your read-modify-write sequence.
  // However, if another update took place during your read-modify-write sequence then your update will fail with an appropriate error.
  // You may also omit it from an update request which will result in no concurrent change detection being applied.
  //
  // When creating a new instance of a resource you must leave it empty. Its value will be populated by the participant server
  // upon successful resource creation.
  //
  // Usage in the field mask of an update call:
  // - you must not user 'resource_version' in an update mask's path as its value is managed internally by the participant server.
  // TODO pbatko: Consider generalizing to all Read-Only fields. If used in an update mask explictly the server shall complain.
  //
  // Optional, Read-Only
  string resource_version = 6;

  // A set of modifiable key-value pairs that can be used to represent arbitrary, client-specific metadata.
  //
  // Constraints:
  // 1. The total size over all keys and values cannot exceed 256kb.
  // 2. Keys are composed of an optional prefix segment and required name segment such that:
  //    - key prefix, when present, must be a valid DNS subdomain with at most 253 characters, followed by a '/' (forward slash) character,
  //    - name segment must have at most 63 characters that are either alphanumeric ([a-z0-9A-Z]), or a '.' (dot), '-' (dash) or '_' (underscore);
  //      additionally it must start and end with an alphanumeric character.
  // 2. Values can be any valid UTF-8 strings.
  //
  // Keys with empty prefix are reserved for end users.
  // Properties set by external tools or internally by the participant must use non-empty key prefixes.
  //
  // Duplicate keys are disallowed by the semantics of the protobuf3 maps.
  // See: https://developers.google.com/protocol-buffers/docs/proto3#maps
  //
  // Usage in the field mask of an update call:
  // - you can select 'annotations' field only as a whole, with the replace-all semantics.
  //
  // Optional, Read-Write (replace-all)
  map<string, string> annotations = 12;

}