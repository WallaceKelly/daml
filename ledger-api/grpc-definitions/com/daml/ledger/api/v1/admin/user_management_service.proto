// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1.admin;

import "com/daml/ledger/api/v1/admin/object_meta.proto";
import "google/protobuf/field_mask.proto";

option java_outer_classname = "UserManagementServiceOuterClass";
option java_package = "com.daml.ledger.api.v1.admin";
option csharp_namespace = "Com.Daml.Ledger.Api.V1.Admin";


// Service to manage users and their rights for interacting with the Ledger API
// served by a participant node.
//
// The authorization rules for its RPCs are specified on the ``<RpcName>Request``
// messages as boolean expressions over these two facts:
// (1) ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
// (2) ``IsAuthenticatedUser(uid)`` denoting whether ``uid`` is the empty string or equal to the id of the authenticated user.
//
// We annotate the fields of request messages (and their sub-messages) with 'Optional' and 'Required' markers.
// 'Optional' means that the client can leave the field unset (set to a default value) when sending a request.
// 'Required' means that the client must set the field to a non-default value when sending a request.
//
// For request messages (and their sub-messages) used in 'Update<Resource>' calls we annotate their fields, corresponding to the resource being updated,
// with 'Read-Only' and 'Read-Write' markers.
// 'Read-Only' means that the field (and its sub-fields) cannot be updated; i.e. the field's name can never be used in a valid update mask's path.
// 'Read-Write' means that the field can be updated; i.e. the field's name can be used in a valid update mask's path.
// TODO pbatko: Document the same for PartyM
// TODO pbatko: Add conformance tests verifying participant rejects invalid update masks: 1) paths that contain read-only items, 2) paths that contain non-existent items, 3) empty paths
service UserManagementService {

    // Create a new user.
    // Errors:
    // - ``ALREADY_EXISTS``: if the user already exists
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);

    // Get the user data of a specific user or the authenticated user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GetUser (GetUserRequest) returns (GetUserResponse);

    // Updates a user resource.
    // TODO pbatko: Improve to be better organized.
    // Update rules for fields (including fields in nested messages) in the request described as:
    // 1) 'Read-Only' cannot be updated and cannot be stated explicitly in an update mask,
    // 2) 'Read-Write' can be updated if stated, explicitly or using the shortcut notation, by the paths in the update mask.
    //
    // In order to update a field to a non-default value you may specify its explicit path (e.g. 'user.is_deactivated')
    // or use a shortcut notation (e.g. 'user') to recursively merge the values of the specified nested message.
    // In order to update a field, which is not a nested message itself, to its default value you must specify its explicit path.
    // TODO pbatko: What if the field one wants to reset is a nested message? What would current POC impl do in such a case? Desired behavior: apply merge effectively changing nothing in the specified subfield vs. reset it to null. Probably reset it to null.
    // TODO pbatko: Apply same description to UpdatePartyDetails rpc
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);

    // Delete an existing user and all its rights.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // List all existing users.
    // Errors:
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse);

    // Grant rights to a user.
    // TODO pbatko: Document whether the updates to user rights (grant/revoke) changes the corresponding user resource internal version
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc GrantUserRights (GrantUserRightsRequest) returns (GrantUserRightsResponse);

    // Revoke rights from a user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc RevokeUserRights (RevokeUserRightsRequest) returns (RevokeUserRightsResponse);

    // List the set of all rights granted to a user.
    // Errors:
    // - ``NOT_FOUND``: if the user doesn't exist
    // - ``UNAUTHENTICATED``: if the request does not include a valid access token
    // - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
    // - ``INVALID_ARGUMENT``: if the payload is malformed or is missing required fields
    rpc ListUserRights (ListUserRightsRequest) returns (ListUserRightsResponse);
}


// Users and rights
///////////////////

// Users are used to dynamically manage the rights given to Daml applications.
// They are stored and managed per participant node.
//
// Read the :doc:`Authorization documentation </app-dev/authorization>` to learn more.
message User {
    // The user identifier, which must be a non-empty string of at most 128
    // characters that are either lowercase alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
    //
    // Required
    // Read-Only
    string id = 1;

    // The primary party as which this user reads and acts by default on the ledger
    // *provided* it has the corresponding ``CanReadAs(primary_party)`` or
    // ``CanActAs(primary_party)`` rights.
    // Ledger API clients SHOULD set this field to a non-empty value for all users to
    // enable the users to act on the ledger using their own Daml party.
    // Users for participant administrators MAY have an associated primary party.
    //
    // Optional
    // Read-Write
    string primary_party = 2;

    // When set, then the user is denied all access to the Ledger API.
    // Otherwise, the user has access to the Ledger API as per the user's rights.
    //
    // Optional
    // Read-Write
    bool is_deactivated = 3;

    // The metadata of this user.
    // Note that its ``metadata.resource_version`` tracks both changes to this user and changes to this user's rights.
    // TODO pbatko: Consider relaxing it to be Optional.
    // TODO         If usnset, the client does not want to check for concurrent updates in update rpr and the client does not want to set the annotations in a create or update rpc
    // TODO pbatko: Add a conformance test that verifies participant rejects requests where this field is
    // TODO         listed explicitly in the update mask and its value is set to None (i.e. client is attempting to delete it)
    // Required (TODO pbatko: ?make it Optional?)
    // Read-Write
    ObjectMeta metadata = 4;
}


// A right granted to a user.
message Right {
    // The right to administrate the participant node.
    message ParticipantAdmin {}

    message CanActAs {
        // The right to authorize commands for this party.
        string party = 1;
    }

    message CanReadAs {
        // The right to read ledger data visible to this party.
        string party = 1;
    }

    // TODO pbatko: Make sure, in conformance tests, that the default value (empty) is rejected
    // Required
    oneof kind {
        // The user can administrate the participant node.
        ParticipantAdmin participant_admin = 1;
        // The user can act as a specific party.
        CanActAs can_act_as = 2;
        // The user can read ledger data visible to a specific party.
        CanReadAs can_read_as = 3;
    }
}


// RPC requests and responses
/////////////////////////////

// Required authorization: ``HasRight(ParticipantAdmin)``
message CreateUserRequest {
    // The user to create.
    // Required
    User user = 1;

    // The rights to be assigned to the user upon creation,
    // which SHOULD include appropriate rights for the ``user.primary_party``.
    //
    // TODO pbatko: Make sure, in conformance tests, that empty rights are that the default value (empty) is accepted. Because we allow deleting all rights from a user so it makes little sense to disallow at creation time
    // Optional
    repeated Right rights = 2;
}

message CreateUserResponse {
    // Created user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message GetUserRequest {
    // The user whose data to retrieve.
    // If set to empty string (the default), then the data for the authenticated user will be retrieved.
    // Required
    string user_id = 1;
}

message GetUserResponse {
    // Retrieved user.
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message UpdateUserRequest {
    // The user to update.
    //
    // TODO pbatko: Make sure, in conformance tests, that the default value (none) is rejected
    // Required
    // Read-Write
    User user = 1;

    // Specifies the fields of the user resource to be updated.
    // At least one field must be specified, e.g. 'user.metadata'.
    //
    // TODO pbatko: Make sure, in conformance tests, that the default value (none) is rejected
    // Required
    google.protobuf.FieldMask update_mask = 2;
}

message UpdateUserResponse {
    // Updated user
    User user = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message DeleteUserRequest {
    // The user to delete.
    // Required
    string user_id = 1;
}

// Does not (yet) contain any data.
message DeleteUserResponse {
}

// Required authorization: ``HasRight(ParticipantAdmin)``
message ListUsersRequest {

    // Pagination token to determine the specific page to fetch.
    // Leave empty to fetch the first page.
    // Optional
    string page_token = 2;

    // Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
    // If 0, the server will decide the number of results to be returned.
    // Optional
    int32 page_size = 3;

}

message ListUsersResponse {
    // A subset of users of the participant node that fit into this page.
    repeated User users = 1;

    // Pagination token to retrieve the next page.
    // Empty, if there are no further results.
    string next_page_token = 2;
}

// Add the rights to the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message GrantUserRightsRequest {
    // The user to whom to grant rights.
    // Required
    string user_id = 1;

    // The rights to grant.
    //
    // TODO pbatko: If this field is required, than we should reject attempting to grant 0 rights. Ensure in conformance tests
    // Required
    repeated Right rights = 2;
}

message GrantUserRightsResponse {
    // The rights that were newly granted by the request.
    repeated Right newly_granted_rights = 1;
}

// Remove the rights from the set of rights granted to the user.
//
// Required authorization: ``HasRight(ParticipantAdmin)``
message RevokeUserRightsRequest {
    // The user from whom to revoke rights.
    // Required
    string user_id = 1;

    // The rights to revoke.
    //
    // TODO pbatko: If this field is required, than we must reject attempting to revoke 0 rights. Ensure in conformance tests
    // Required
    repeated Right rights = 2;
}

message RevokeUserRightsResponse {
    // The rights that were actually revoked by the request.
    repeated Right newly_revoked_rights = 1;
}

// Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedUser(user_id)``
message ListUserRightsRequest {
    // The user for which to list the rights.
    // If set to empty string (the default), then the rights for the authenticated user will be listed.
    // Required
    string user_id = 1;

    // TODO (i12052): add pagination following https://cloud.google.com/apis/design/design_patterns#list_pagination
}

message ListUserRightsResponse {
    // All rights of the user.
    repeated Right rights = 1;
}
