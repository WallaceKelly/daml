// Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package com.daml.ledger.api.v1;

import "com/daml/ledger/api/v1/value.proto";


option java_outer_classname = "TransactionFilterOuterClass";
option java_package = "com.daml.ledger.api.v1";
option csharp_namespace = "Com.Daml.Ledger.Api.V1";

// Filtering Transaction and Active Contract Set streams
////////////////////////////////////////////////////////


// Used for filtering Transaction and Active Contract Set streams.
// Determines which on-ledger events will be served to the client.
message TransactionFilter {

  // Keys of the map determine which parties' on-ledger transactions are being queried.
  // Values of the map determine which events are disclosed in the stream per party.
  // At the minimum, a party needs to set an empty Filters message to receive any events.
  // Each key must be a valid PartyIdString (as described in ``value.proto``).
  // Required
  map<string, Filters> filters_by_party = 1;
}

message Filters {

  // If not set, no filters will be applied.
  // Optional
  InclusiveFilters inclusive = 1;
}

// If no internal fields are set, no filters will be applied.
message InclusiveFilters {

  // A collection of templates for which the payload will be included in the create_arguments of CreatedEvents.
  // SHOULD NOT contain duplicates.
  // Including a template here is equivalent to including a filter with the selector of that template and
  // create_arguments set to true.
  // Optional
  repeated Identifier template_ids = 1;

  // Collection of filters and the values that should be included for events matching the filter.
  // Optional
  repeated InterfaceFilter interface_filters = 2;
}

// A filter on the transaction & ACS stream.
message InterfaceFilter {

  // Required
  Identifier interface_id = 1;

  // Include create_arguments_blob in CreateEvent
  boolean include_contract_blob = 2;

  // Include interface view if the interface is implemented by the template.
  boolean include_interface_arguments = 3;
}



// Filtering Exercise Event streams
///////////////////////////////////

message TransactionExerciseFilter {

  map<string, ExerciseFilters> filters_by_party = 1;
}

message ExerciseFilters {
  // Required
  InclusiveExerciseFilters inclusive = 1;
}

// A filter on the exercise stream.
message InclusiveExerciseFilters {
  repeated ChoiceFilter choices = 1;
}

// Filter of a choice defined in either a template or an interface.
message ChoiceFilter {
        // Required if interface_id is not set.
        Identifier template_or_interface_id = 1;
        // Required.
        string choice = 2;
}

